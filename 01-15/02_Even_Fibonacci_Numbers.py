'''
Created on Mar 4, 2013

@author: RDrapeau

Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
find the sum of the even-valued terms.
'''

dict = {} # Fibonacci numbers already calculated

# Returns the nth number in the Fibonacci sequence
def fib(n):
    if n in dict: # Already computed this number
        return dict[n]
    elif n < 2:
        dict[n] = n
        return n
    else:
        dict[n] = fib(n - 1) + fib(n - 2)
        return dict[n]

# Returns sum of the even numbers in the Fibonacci sequence whose values do not exceed four million
def get_nums(max):
    number = fib(0)
    count = 1
    sum = 0
    while (number < max):
        if number % 2 == 0:
            sum += number
        number = fib(count)
        count += 1
    return sum

print get_nums(4000000)